{"version":3,"file":"hamsters.node.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./feature/observable.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(global, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    let supports = false;\n    try {\n      let workerBlob = this.generateWorkerBlob(this.selectHamsterWheel());\n      let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      supports = true;\n    } catch (e) {\n      supports = false;\n    }\n    return supports;\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    const isAsync = workerLogic.toString().trim().startsWith('async');\n    let workerFunction = {};\n    if(isAsync) {\n      workerFunction = `async () => { return (async ${workerLogic.toString()})(); }`;\n    } else {\n      workerFunction = `(${workerLogic.toString()})();`;\n    }\n    return URL.createObjectURL(this.createDataBlob(workerFunction));\n  }\n\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.hamsters.scaffold.custom) {\n      return this.hamsters.scaffold.custom;\n    }\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return this.generateWorkerBlob(this.hamsters.scaffold.regular.scaffold);\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = new hamsters.observable([]);\n    this.running = new hamsters.observable([]);\n    this.pending = new hamsters.observable([]);\n    this.fetchHamster = this.getAvailableThread.bind(this);\n  }\n\n  /**\n  * @function addWorkToPending - Adds task to queue waiting for available thread\n  * @param {number} index - Index of the task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, hamsterFood, task, resolve, reject) {\n    if (this.hamsters.habitat.debug) {\n      \n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index,\n      hamsterFood,  \n      task,\n      resolve,\n      reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} hamster - The thread to run the task\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if (this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.index.id].dequeued_at = Date.now();\n    }\n    return this.runTask(hamster, item.index, item.hamsterFood, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread - Gets an available thread\n  * @param {number} threadId - Id of the thread\n  * @returns {object} - The available thread\n  */\n  getAvailableThread(threadId) {\n    if (this.hamsters.habitat.persistence) {\n      return this.threads.get(threadId);\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[id].started_at = Date.now();\n    }\n    task.scheduler.workers.push(id);\n    this.running.push(id);\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {number} maxThreads - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    while (maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, SharedWorker, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    if (this.hamsters.habitat.webWorker) {\n      return new SharedWorker(hamsterWheel, 'SharedHamsterWheel');\n    }\n    return new Worker(hamsterWheel);\n  }\n    \n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, subTaskId, task) {\n    index.id = subTaskId;\n\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function runDistributedTask - Runs incoming distributed function using thread\n  * @param {object} incomingMessage - The incoming subTask object\n  */\n  runDistributedTask(incomingMessage, targetClient) {\n    const hamster = this.fetchHamster(this.running.length());\n    let task = incomingMessage.task;\n    let index = incomingMessage.hamsterFood.index;\n    let handleResponse = this.hamsters.distribute.returnDistributedOutput;\n    task.targetClient = targetClient;\n    task.messageId = incomingMessage.messageId;\n    task.isReply = true;\n\n    this.runTask(hamster, index, incomingMessage.hamsterFood, incomingMessage.task, handleResponse, handleResponse);\n  }\n\n  /**\n  * @function runTask - Runs function using thread\n  * @param {object} hamster - The thread to run the task\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, hamsterFood, task, resolve, reject) {\n    const threadId = this.running.length();\n    this.hamsters.pool.keepTrackOfThread(task, threadId);\n    if (this.hamsters.habitat.legacy) {\n      this.hamsters.scaffold.legacy.scaffold(hamsterFood, resolve, reject);\n    } else {\n      if(this.hamsters.trainer) {\n        this.hamsters.trainer(index, task, threadId, hamster, resolve, reject);\n      } else {\n        this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      }\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, subTaskId, task, resolve, reject) {\n    const hamsterFood = this.prepareMeal(index, subTaskId, task);\n    if (this.hamsters.habitat.maxThreads <= this.running.length()) {\n      this.addWorkToPending(index, hamsterFood, task, resolve, reject);\n    } else {\n      if(task.input.distribute) {\n        this.hamsters.distribute.distributeTask(task, hamsterFood, resolve, reject);\n      } else {\n        const hamster = this.fetchHamster(this.running.length());\n        this.runTask(hamster, index, hamsterFood, task, resolve, reject);\n      }\n    }\n  }\n\n  processDistributedReturn(data) {\n    debugger;\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.completed_at = Date.now();\n      console.info(\"Hamsters.js Task Completed: \", task);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  /**\n  * @function removeFromRunning - Removes a thread from the running pool\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to remove\n  */\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1);\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1);\n  }\n\n  /**\n   * @function processReturn - Processes the returned message from a thread\n   * @param {number} index - Index of the subarray processed\n   * @param {object} message - Message returned from the thread\n   * @param {object} task - Provided library functionality options for this task\n   */\n  processReturn(index, message, task) {\n    const isReactNative = this.hamsters.habitat.reactNative;\n    const isNode = this.hamsters.habitat.node;\n    const response = message.data;\n    const messageData = isReactNative ? JSON.parse(message).data : (response.data !== undefined ? response.data : response);\n    const threadId = isNode ? message.index.id : response.index.id;\n\n    if (task.scheduler.threads !== 1) {\n      if (isReactNative || task.input.mixedOutput) {\n          task.output[threadId] = messageData;\n      } else {\n        this.hamsters.data.addThreadOutputWithIndex(task, index, messageData);\n      }\n    } else {\n      task.output = messageData;\n    }\n  }\n\n  /**\n  * @function setOnMessage - Sets the message handlers for a thread\n  * @param {object} hamster - The thread to set the handlers on\n  * @param {function} onThreadResponse - Handler for thread response\n  * @param {object} habitat - Habitat configuration\n  * @param {function} reject - onError method\n  */\n  setOnMessage(hamster, onThreadResponse, reject) {\n    if (this.hamsters.habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    } else if (this.hamsters.habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.onerror = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to train\n  * @param {object} hamster - The thread to train\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    const onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(index, message, task);\n      if (this.hamsters.habitat.debug) {\n        task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (!this.hamsters.habitat.persistence) {\n        hamster.terminate();\n      }\n      if (this.hamsters.pool.pending.length() !== 0) {\n        const queueHamster = this.hamsters.pool.fetchHamster(this.hamsters.pool.running.length());\n        this.hamsters.pool.processQueuedItem(queueHamster, this.hamsters.pool.pending.shift());\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  */\n  scheduleTask(task) {\n    let i = 0;\n  \treturn new Promise((resolve, reject) => {\n      if(this.hamsters.debug) {\n        task.scheduler.metrics.started_at = Date.now();\n      }\n      while (i < task.scheduler.threads) {\n        this.hamsterWheel(task.scheduler.indexes[i], i, task, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (this.hamsters.habitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    return functionString.substring((functionString.indexOf(\"{\") + 1), (functionString.length -1));\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n  \n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: null,\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Distribute {\n\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = new hamsters.observable({});\n    this.clientInfo = new hamsters.observable({});\n    this.sendChannels = new hamsters.observable({});\n    this.receiveChannels = new hamsters.observable({});\n    this.pcConstraint = null;\n    this.dataConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = new hamsters.observable({});\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.establishConnection = this.initWebSocket.bind(this);\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      const registerMessage = {\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      };\n      this.ws.send(JSON.stringify(registerMessage));\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'register':\n          this.handleClientReconnect(message);\n          break;\n        case 'update-client-list':\n          this.updateClientList(message.clients);\n          break;\n        case 'offer':\n          this.handleOffer(message);\n          break;\n        case 'answer':\n          this.handleAnswer(message);\n          break;\n        case 'candidate':\n          this.handleCandidate(message);\n          break;\n        case 'task-response':\n          this.handleTaskResponse(message);\n          break;\n        default:\n          if (this.hamsters.habitat.debug) {\n            console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n          }\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error: ${error}`);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed. Reconnecting...`);\n      }\n      this.establishConnection();\n    };\n  }\n\n  updateClientList(clients) {\n    const newClientIds = new Set(clients.map(client => client.id));\n    clients.forEach(client => {\n        if (client.id !== this.clientId && !this.remoteConnections.get(client.id)) {\n            this.createConnection(client.id);\n        }\n    });\n    const remoteConnections = this.remoteConnections.getData();\n    Object.keys(remoteConnections).forEach((key) => {\n        if (!newClientIds.has(key)) {\n          this.handleClientDisconnect(key);\n        }\n    });\n  }\n\n  handleClientDisconnect(clientId) {\n    if (this.remoteConnections.get(clientId)) {\n      this.remoteConnections.get(clientId).close();\n      this.remoteConnections.delete(clientId);\n    }\n    if (this.sendChannels.get(clientId)) {\n      this.sendChannels.get(clientId).close();\n      this.sendChannels.delete(clientId);\n    }\n    if (this.receiveChannels.get(clientId)) {\n      this.receiveChannels.get(clientId).close();\n      this.receiveChannels.delete(clientId);\n    }\n    this.clientInfo.delete(clientId);\n  };\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} connection error: `, error);\n      }\n      return;\n    }\n    this.handleClientDisconnect(newClientId);\n    this.clientId = newClientId;\n    this.loadClientList();\n  }\n\n  loadClientList() {\n    fetch(`/clients?currentId=${this.clientId}`)\n      .then(response => response.json())\n      .then(data => {\n        this.updateClientList(data);\n      })\n      .catch(error => {\n        if (this.hamsters.habitat.debug) {\n          console.error(`Hamsters.js ${this.hamsters.version} Error fetching client list: ${error}`);\n        }\n      });\n  }\n\n  createConnections() {\n    this.remoteConnections.forEach((_, targetClient) => {\n      this.createConnection(targetClient);\n    });\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections.get(targetClient)) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new RTCPeerConnection(servers, this.pcConstraint);\n    const sendChannel = localConnection.createDataChannel('hamstersjs', this.dataConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ \n          type: 'candidate', \n          target: targetClient, \n          from: this.clientId,\n          logicalCores: this.hamsters.maxThreads,\n          userAgent: navigator.userAgent,\n          candidate: e.candidate\n        }));\n      }\n    };\n\n    sendChannel.onopen = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onclose = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'ping':\n          this.handlePing(targetClient, message.startTime);\n          break;\n        case 'pong':\n          this.handlePong(targetClient, message.startTime);\n          break;\n        default:\n          this.onReceiveMessageCallback(targetClient, event.data);\n      }\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.receiveChannelCallback(event, targetClient);\n    };\n\n    this.remoteConnections.set(targetClient, localConnection);\n    this.sendChannels.set(targetClient, sendChannel);\n    this.receiveChannels.set(targetClient, null);\n\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError);\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n\n    if (!this.remoteConnections.get(targetClient)) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.receiveChannelCallback(event, targetClient);\n      };\n\n      const sendChannel = remoteConnection.createDataChannel('hamstersjs', this.dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        switch (message.type) {\n          case 'ping':\n            this.handlePing(targetClient, message.startTime);\n            break;\n          case 'pong':\n            this.handlePong(targetClient, message.startTime);\n            break;\n          default:\n            this.onReceiveMessageCallback(targetClient, event.data);\n        }\n      };\n\n      remoteConnection.setRemoteDescription(new RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        remoteConnection.setLocalDescription(desc);\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, answer: desc }));\n      }).catch(this.onCreateSessionDescriptionError);\n\n      this.remoteConnections.set(targetClient, remoteConnection);\n      this.sendChannels.set(targetClient, sendChannel);\n    }\n  }\n\n  storeClientConnectionInfo(data) {\n    const client = {\n      logicalCores: data.logicalCores,\n      userAgent: data.userAgent,\n    };\n    this.clientInfo.set(data.from, client);\n  }\n\n  handleAnswer(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.setRemoteDescription(new RTCSessionDescription(data.answer));\n  }\n\n  handleCandidate(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.addIceCandidate(new RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError);\n  }\n\n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime }));\n    }\n  }\n\n  handlePing(targetClient, startTime) {\n    const sendChannel = this.receiveChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent ping to ${targetClient}`);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime) {\n    const latency = performance.now() - startTime;\n    this.clientInfo.set(targetClient, { ...this.clientInfo.get(targetClient), latency });\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  fetchDistributedClient() {\n    const sendChannelKeys = Object.keys(this.sendChannels.getData());\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      const channel = this.sendChannels.get(clientId);\n      const client = this.clientInfo.get(clientId);\n      if (channel.readyState === 'open' && client.latency < minLatency) {\n        minLatency = client.latency;\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  distributeTask(task, hamsterFood, resolve, reject) {\n    const targetClient = this.fetchDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n\n    const messageId = this.generateUniqueId();\n\n    const subTask = {\n      hamsterFood,\n      index: hamsterFood.index,\n      task,\n      messageId,\n    };\n\n    this.pendingPromises.set(messageId, { resolve, reject });\n\n    this.sendData({ targetClient, data: subTask });\n  }\n\n  handleTaskResponse(incomingMessage) {\n    const { messageId, output, error } = incomingMessage;\n    const pendingPromise = this.pendingPromises.get(messageId);\n\n    if (pendingPromise) {\n      if (error) {\n        pendingPromise.reject(error);\n      } else {\n        pendingPromise.resolve(output);\n      }\n\n      this.pendingPromises.delete(messageId);\n    }\n  }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  sendDataResponse(data) {\n    const targetClient = data.targetClient;\n    const sendChannel = this.receiveChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent response to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  closeDataChannels() {\n    for (const targetClient of this.sendChannels.getData().keys()) {\n      const sendChannel = this.sendChannels.get(targetClient);\n      if (sendChannel) {\n        sendChannel.close();\n        this.sendChannels.delete(targetClient);\n      }\n      const receiveChannel = this.receiveChannels.get(targetClient);\n      if (receiveChannel) {\n        receiveChannel.close();\n        this.receiveChannels.delete(targetClient);\n      }\n      const remoteConnection = this.remoteConnections.get(targetClient);\n      if (remoteConnection) {\n        remoteConnection.close();\n        this.remoteConnections.delete(targetClient);\n      }\n      this.clientInfo.delete(targetClient);\n    }\n    this.localConnection = null;\n  }\n\n  receiveChannelCallback(event, targetClient) {\n    const receiveChannel = event.channel;\n\n    receiveChannel.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'ping':\n          this.handlePing(targetClient, message.startTime);\n          break;\n        case 'pong':\n          this.handlePong(targetClient, message.startTime);\n          break;\n        default:\n          this.onReceiveMessageCallback(targetClient, event.data);\n      }\n    };\n\n    receiveChannel.onopen = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    receiveChannel.onclose = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    this.receiveChannels.set(targetClient, receiveChannel);\n  }\n\n  onReceiveMessageCallback(targetClient, data) {\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received message!`);\n    }\n    const incomingMessage = JSON.parse(data);\n\n    if (incomingMessage.isReply) {\n      this.handleTaskResponse(incomingMessage);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} response received for task: `, incomingMessage);\n      }\n    } else {\n      this.hamsters.pool.runDistributedTask(incomingMessage, targetClient);\n    }\n  }\n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    this.measureLatency(targetClient);\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n  onReceiveChannelStateChange(targetClient) {\n    const receiveChannel = this.receiveChannels.get(targetClient);\n    if (receiveChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} receive channel state changed for ${targetClient}: ${receiveChannel.readyState}`);\n    }\n  }\n\n  generateUniqueId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n}\n\nexport default Distribute;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Observable {\n  constructor(initialData = {}) {\n    this.data = Array.isArray(initialData) ? [...initialData] : { ...initialData };\n    this.events = {};\n  }\n\n  // Allow listeners to register for specific events\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  // Notify listeners about the event\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(...args));\n    }\n  }\n\n  set(key, value) {\n    if (typeof key === 'string') {\n        const keys = key.split('.');\n        let current = this.data;\n        for (let i = 0; i < keys.length - 1; i++) {\n            current = current[keys[i]];\n        }\n        current[keys[keys.length - 1]] = value;\n    } else if (typeof key === 'object') {\n      this.data[key] = value;\n    }\n    this.emit('change', this.data);\n  }\n\n  get(key) {\n    return this.data[key];\n  }\n\n  push(...items) {\n    this.data.push(...items);\n    this.emit('change', this.data);\n  }\n\n  pop() {\n    const item = this.data.pop();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  shift() {\n    const item = this.data.shift();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  splice(start, deleteCount, ...items) {\n    const result = this.data.splice(start, deleteCount, ...items);\n    this.emit('change', this.data);\n    return result;\n  }\n\n  indexOf(item) {\n    return this.data.indexOf(item);\n  }\n\n  length() {\n    return this.data.length;\n  }\n\n  delete(property) {\n    if (!Array.isArray(this.data)) {\n      delete this.data[property];\n      this.emit('change', this.data);\n    }\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n\nexport default Observable;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\nimport Observable from './feature/observable';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.1';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.observable = Observable;\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n    this.processStartOptions(startOptions);\n    \n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          if(key === 'scaffold') {\n            this.scaffold.custom = startOptions[key];\n          } else {\n            this[key] = startOptions[key];\n          }\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task).then(resolve).catch(reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","global","Legacy","constructor","hamsters","this","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","bind","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","supports","workerBlob","generateWorkerBlob","e","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","workerLogic","workerFunction","toString","trim","startsWith","URL","createObjectURL","SharedArrayBuffer","Proxy","custom","regular","Pool","threads","observable","running","pending","fetchHamster","getAvailableThread","addWorkToPending","hamsterFood","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","id","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","started_at","workers","spawnHamsters","hamsterWheel","prepareMeal","subTaskId","array","input","getSubArrayFromIndex","excludedKeys","has","runDistributedTask","targetClient","handleResponse","distribute","returnDistributedOutput","messageId","isReply","pool","trainer","trainHamster","feedHamster","distributeTask","processDistributedReturn","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completed_at","console","info","removeFromRunning","splice","processReturn","response","messageData","JSON","parse","mixedOutput","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessageerror","onerror","once","terminate","queueHamster","shift","scheduleTask","i","Promise","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","concat","functionBody","functionString","String","substring","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","inputArray","slice","Task","functionToRun","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","request","indexedDB","open","event","error","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","clientInfo","sendChannels","receiveChannels","pcConstraint","dataConstraint","ws","clientId","pendingPromises","sendDataResponse","establishConnection","initWebSocket","WebSocket","onopen","version","registerMessage","logicalCores","send","handleClientReconnect","updateClientList","clients","handleOffer","handleAnswer","handleCandidate","handleTaskResponse","onclose","newClientIds","map","client","forEach","createConnection","getData","handleClientDisconnect","close","newClientId","loadClientList","log","fetch","json","createConnections","_","RTCPeerConnection","iceServers","urls","sendChannel","createDataChannel","onicecandidate","candidate","onSendChannelStateChange","handlePing","startTime","handlePong","onReceiveMessageCallback","ondatachannel","receiveChannelCallback","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","remoteConnection","setRemoteDescription","RTCSessionDescription","createAnswer","answer","storeClientConnectionInfo","addIceCandidate","RTCIceCandidate","onAddIceCandidateError","measureLatency","performance","sendPing","readyState","latency","toFixed","fetchDistributedClient","sendChannelKeys","warn","minLatency","Infinity","channel","generateUniqueId","subTask","sendData","pendingPromise","_ref","closeDataChannels","receiveChannel","onReceiveChannelStateChange","random","substr","Observable","initialData","arguments","isArray","events","on","callback","emit","_len","_key","split","current","pop","deleteCount","_len2","items","_key2","property","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}